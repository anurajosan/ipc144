///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #6
Full Name  : Anuraj Singh Osan 
Student ID#: 165546235

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1.  These types of arrays are known as parallel arrays ,they have related data in separate arrays of the same size, where each array corresponds to a different data type. In this workshop part 2 we used 3 arrays for taking couple of entries for cost, priority and finnace, with each array element at the same index representing the respective data for a single entity. This organizational approach enhances code clarity and simplifies data management 

2. For - loop is most convenient iteration construct for working with arrays,
   For example in my code 
for(i = 0; i < list ; i++)
{
    printf("%3d  %5d    %5c    %11.2lf\n",i+1,priority[i],finance[i],cost[i]);
    totalcost += cost[i];
}
This is a for loop iteration, but we can even use a while loop instead \

i = 0;
while(i < list)
{
    printf("%3d  %5d    %5c    %11.2lf\n", i+1, priority[i], finance[i], cost[i]);
    totalcost += cost[i];
    i++;
}

3.I used 'gcc' to compile the program in order to find and correct syntax issues, such as mismatched braces or missing semicolons, before testing and debugging it. I tested the program using a range of inputs, such as boundary values and erroneous data, to look for semantic problems and make sure it handled errors correctly. I tracked variable values and program flow using print statements, which made it easier to identify and fix logical mistakes. This methodical approach made sure the program handled all edge circumstances and operated as intended.

 